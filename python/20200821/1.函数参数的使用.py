# -*- coding:utf-8 -*-

"""
@version:python3.8
@author: Bruce
@file:   .py
@time:   2020/8/21 8:38
"""


# 一、形参与实参介绍：
# 1、形参：在定义函数阶段定义的参数，称之为形式参数，简称形参，相当于变量名
# def func(x,y):
#     print(x,y)

# 2、实参：在函数调用阶段传入的值，称之为实际参数，简称实参，相当于变量值
# func(1,2)

# 形参与实参的关系：
# a、在调用阶段实参会绑定给形参
# b、这种绑定关系只能在函数体内使用
# c、实参与形参的绑定关系在函数调用事生效，函数调用结束后释放绑定关系

# 二、形参与实参的具体介绍：
# 1、位置参数：按照从左到右的顺序依次定义的参数

# 位置形参：在函数定义阶段，按照从左到右的顺序依次定义的“变量名”
# 特点：必须被传值，多一个不行少一个也不行
# def func(x,y):
#     print(x,y)
#
# func(1,2)
#
# 位置实参：在函数调用阶段，按照从左到右的顺序依次传入的值
# 特点：按照顺序与形参一一对应
#
# func(1,2)

# 2、关键字参数：
# 关键字实参：在函数调用阶段，按照key=value的形式传值
# 特点：指名道姓给某个形参传值，可以不参照顺序
# def func(x,y):
#     print(x,y)
#
# func(y=2,x=1)

# 位置实参与关键字实参混合使用：
# 强调：
# a、位置实参必须放在关键字实参之前使用
# func(1,y=2)
# func(x=1,2)  # 语法错误

# b、不能为同一个参数重复传值

# 3、默认参数：
# 默认形参：在函数定义阶段，就已经被赋值的形参，称之为默认形参
# 特点：在定义阶段就已经赋值，就意味着在调用阶段可以不用为其赋值
# def func(x,y=2):
#     print(x,y)
#
# func(1,)

# 位置形参与默认形参混用：
# 强调：
# a、位置形参必须在默认形参的左边
# def func(x,y=2):
#     print(x,y)
# func(1)

# b、默认参数的值是在函数定义阶段被赋值的，准确的说被赋予值的内存地址
# 示例一：
# m=2
# def func(x,y=m):  # y-->2的内存地址
#     print(x,y)
#
# m=333
# func(1)  # 运行结果：1 2

# 示例二：
# m=[111,]
# def func(x,y=m):  # m是可变类型，y-->[111,]的内存地址
#     print(x,y)
#
# m.append(333)  #m的内存地址没有变
# func(1)  #运行结果：1 [111, 333]

# c、虽然默认值可以被指定为任意类型，但是不推荐使用可变类型
# 函数最理想的状态，函数调用只跟函数本身有关系，不受外界代码的影响

# 4、可变长度的参数(*与**的用法)：
# 可变长度指的是，在调用函数是传入的值(实参)的个数不固定
# 而实参是用来为形参赋值的，所以对应着，针对溢出的实参必须有对应的形参来接收

# 4.1、可变长度的位置参数：
# I、*形参名(约定俗成*args)：用来接收溢出的位置实参，溢出的位置实参会被*保存成元组格式，
# 然后赋值给紧跟其后的形参名
# def func(x,y,*z):
#     print(x,y,z)
#
# func(1,2,3,4,5,6)  # 运行结果：1 2 (3, 4, 5, 6)

# 示例：求任意个数相加的和
# def my_sum(*args):
#     res = 0;
#     for item in args:
#         res += item
#     return res
#
# res = my_sum(1, 2, 3, 4, 5, 6)
# print(res)

# II、*可以用在实参中，实参中带*，先将*后的值分散成位置实参
# def func(x, y, z):
#     print(x, y, z)
#
# # func(*[11,22,33])  # 运行结果：11 22 33
# # func(*[11,22])  # 报错
# l = [11, 22, 33]
# func(*l)

# III、形参与实参中都带*
# def func(x, y, *args):
#     print(x, y, args)
#
# # func(1, 2, [3, 4, 5, 6])  # 运行结果：1 2 ([3, 4, 5, 6],)
# func(1, 2, *[3, 4, 5, 6])  # 运行结果：1 2 (3, 4, 5, 6)


# 4.2、可变长度的关键字参数
# I、**形参名(约定俗成**kwargs)：是用来接收溢出的关键字实参，**会将溢出的关键字实参保存成字典格式，
# 然后赋值给紧跟其后的形参名
# def func(x, y, **kwargs):
#     print(x, y, kwargs)
#
# func(1, y=2, a=3, b=4, c=5)  # 运行结果：1 2 {'a': 3, 'b': 4, 'c': 5}

# II、**可以用在实参中(**后跟的只能是字典)，实参中带有**，先将**后的实参打散成关键字实参
# def func(x, y, z):
#     print(x, y, z)
#
# func({'x':1,'y':2,'z':3})  # 报错，把字典传给x，y和z没有传值
# func(*{'x': 1, 'y': 2, 'z': 3})  # 运行结果：x y z
# func(**{'x':1,'y':2,'z':3})  # 运行结果：1 2 3

# III、形参与实参中都带有**
# def func(x,y,**kwargs):
#     print(x,y,kwargs)
#
# func(**{'y':111,'x':222,'a':333,'b':444})  # 运行结果：222 111 {'a': 333, 'b': 444}

# *args与**kwargs的混用：
# a、*args必须在**kwargs之前
# def func(*args, **kwargs):
#     print(args)
#     print(kwargs)
#
# func(1, 2, 3, 4, 5, 6, 7, 8, x=1, y=2, z=3)

# 运行结果：
    # (1, 2, 3, 4, 5, 6, 7, 8)
    # {'x': 1, 'y': 2, 'z': 3}
